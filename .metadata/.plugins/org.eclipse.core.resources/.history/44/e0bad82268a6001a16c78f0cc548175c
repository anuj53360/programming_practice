package binarytree;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

public class ZigZagLevelOrderTraversal {

	class TreeNode {
		int val;
		TreeNode left;
		TreeNode right;

		TreeNode(int val) {
			this.val = val;
			left = null;
			right = null;
		}
	}

	TreeNode root;

	public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
		if (root == null)
			return null;
		Stack<TreeNode> stack1 = new Stack<>();
		Stack<TreeNode> stack2 = new Stack<>();
		List<Integer> list1 = new ArrayList<>();
		List<List<Integer>> list2 = new ArrayList<>();
		stack1.push(root);
		boolean leftright = true;

		while (!stack1.isEmpty()) {
			TreeNode temp = stack1.peek();
			list1.add(temp.val);
		//	System.out.println(temp.val);
			stack1.pop();
			if (leftright) {
				if (temp.left != null)
					stack2.add(temp.left);
				if (temp.right != null)
					stack2.add(temp.right);
			} else {
				if (temp.right != null)
					stack2.add(temp.right);
				if (temp.left != null)
					stack2.add(temp.left);
			}

			if (stack1.isEmpty()) {
				list2.add(list1);
				leftright = !leftright;
				Stack<TreeNode> stack = stack1;
				stack1 = stack2;
				stack2 = stack;
			}
		}

		for (Integer integer : list1) {
			System.out.println(integer);
		}

		return null;
	}

	public static void main(String[] args) {
		ZigZagLevelOrderTraversal zigzag = new ZigZagLevelOrderTraversal();
		zigzag.root = zigzag.new TreeNode(3);
		zigzag.root.left = zigzag.new TreeNode(9);
		zigzag.root.right = zigzag.new TreeNode(20);
		zigzag.root.right.left = zigzag.new TreeNode(15);
		zigzag.root.right.right = zigzag.new TreeNode(7);
              zigzag.zigzagLevelOrder(zigzag.root);
	}
}

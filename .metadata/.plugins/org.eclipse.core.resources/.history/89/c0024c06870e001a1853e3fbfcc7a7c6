package linkedlist;

import java.util.HashMap;

public class LRUCacheImpl {

	class Node{
		int key;
		int value;
		Node prev;
		Node next;
		 public Node(){
			this.key=0;
			this.value=0;
			this.next=null;
			this.prev=null;
		}
	}
	HashMap<Integer, Node> hasMap;
	Node start;
	Node end;
	int cache_size=5;
	LRUCacheImpl(){
		hasMap=new HashMap<>();
	}

	public int getEntry(int key) {
		if(hasMap.containsKey(key)) {
			Node node= hasMap.get(key);
			removeNode(node);
			addtoTop(node);
			return node.value;
		}
		return -1;
	}
	
	public void removeNode(Node node) {
		if (node.prev != null) {
			node.prev.next = node.next;
		} else {
			start = node.next;
		}
		if (node.next != null) {
			node.next.prev = node.prev;
		} else {
			end = node.prev;
		}
	}
	
	
	public void addtoTop(Node node) {
		node.next = start;
		node.prev = null;
		if (start != null)
			start.prev = node;
		start = node;
		if (end == null)
			end = start;
	}
	
	public void putEntry(int key, int value) {
		if (hasMap.containsKey(key))
		{
			Node node = hasMap.get(key);
			node.value = value;
			removeNode(node);
			addtoTop(node);
		} else {
			Node newnode = new Node();
			newnode.left = null;
			newnode.right = null;
			newnode.value = value;
			newnode.key = key;
			if (hashmap.size() > LRU_SIZE)
			{
				hashmap.remove(end.key);
				removeNode(end);				
				addAtTop(newnode);

			} else {
				addAtTop(newnode);
			}

			hashmap.put(key, newnode);
		}
	}
	
	
	public static void main(String[] args) {
		
	}
}

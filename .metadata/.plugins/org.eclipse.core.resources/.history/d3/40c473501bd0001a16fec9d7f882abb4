package leetcode;

public class LongestPalindromicSubString {

	public String longestPalindrome(String s) {

		int n = s.length();
		boolean[][] dp = new boolean[n][n];

		int maxlength = 1;
		for (int i = 0; i < n - 1; i++) {
			dp[i][i] = true;
		}

		int start = 0;
		for (int i = 0; i < n - 1; i++) {
			if (s.charAt(i) == s.charAt(i + 1)) {
				dp[i][i + 1] = true;
				start = i;
				maxlength = 2;
			}
		}

		for (int i = 3; i <= n; i++) {

			for (int j = 0; j < n - i - 1; j++) {

				int k = j + i - 1;

				if (dp[j + 1][k - 1] && s.charAt(j) == s.charAt(k)) {
					dp[j][k] = true;

					if (i > maxlength) {
						start = j;
						maxlength = i;
					}
				}
			}
		}
		return palindrome(maxlength);
	}

	private String palindrome(int maxlength) {

		return null;
	}

	public static void main(String[] args) {

	}
}

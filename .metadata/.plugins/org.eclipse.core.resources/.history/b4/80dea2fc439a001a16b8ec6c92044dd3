package com.pdf.pdfreader.serviceIm;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import com.pdf.pdfreader.controller.PdfReaderController;
import com.pdf.pdfreader.service.PdfReaderService;

@Service
public class PdfReaderServiceImpl implements PdfReaderService {

	Logger logger = LoggerFactory.getLogger(PdfReaderController.class);

	@Override
	public Map<Integer, Integer> readpdffile() throws IOException {
		logger.info("readpdffile method called from" + PdfReaderServiceImpl.class);
		return readpdffileutil();
	}

	public Map<Integer, Integer> readpdffileutil() throws IOException {
		String fileName = "C:/Users/anuj5/Downloads/pdfreader/pdfreader/Backend.pdf";
		Map<Integer, Integer> map = new HashMap<>();
		PDDocument document = PDDocument.load(new File(fileName));
		int pages = document.getNumberOfPages();

		GetWordFromPdf gw = new GetWordFromPdf();
		ExecutorService executorservice = Executors.newFixedThreadPool(pages);

//		Callable<Integer> callable = () -> {
//			List<String> l = null;
//			try {
//				for (int i = 1; i < pages; i++) {
//					// List<String> l = null;
//					l = gw.getwords(i, fileName);
//					System.out.println(Thread.currentThread().getName());
//					System.out.println(l.size() + " " + i);
//				}
//			} catch (IOException e) {
//				e.printStackTrace();
//			}
//			return l.size();
//		};
//
//		int value = 0;
//		for (int i = 1; i <= pages; i++) {
//			Future<Integer> f = executorservice.submit(callable);
//			try {
//				value += f.get();
//				map.put(1, value);
//			} catch (InterruptedException | ExecutionException e) {
//
//				e.printStackTrace();
//			}
//		}
//		executorservice.shutdown();
//
//		try {
//			executorservice.awaitTermination(60000, TimeUnit.SECONDS);
//		} catch (InterruptedException e) {
//			e.printStackTrace();
//		}
		for (int i = 1; i <= pages; i++) {
			List<String> l = null;
			try {
				l=gw.getwords(i, fileName);
			} catch (IOException e) {
				e.printStackTrace();
			}
			map.put(i, l.size());
		}

		for (Entry<Integer, Integer> entry : map.entrySet()) {
			System.out.println(entry.getKey() + " " + entry.getValue());
		}
		return map;

	}

}

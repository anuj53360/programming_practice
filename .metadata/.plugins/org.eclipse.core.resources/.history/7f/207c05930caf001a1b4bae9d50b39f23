package anuj_array_geeksforgeeks;

import java.util.HashMap;
import java.util.LinkedHashMap;

public class SubArrayGivenSum {

	public static void subArrayGivenSum(int[] array, int sum) {

		for (int i = 0; i < array.length; i++) {
			int new_sum = array[i];
			for (int j = i + 1; j < array.length; j++) {
				new_sum = new_sum + array[j];
				//System.out.println(new_sum);
				if (new_sum == sum) {
					System.out.println("1st index" + i + " " + "2nd index" + j);
				}
			}
		}
	}

	public static void subArrayWithGivenSum(int[] array, int sum) {
		int curr_sum = array[0];
		int i = 0;
		int j;
		for (j = 1; j < array.length; j++) {
			while (curr_sum > sum) {
				curr_sum = curr_sum - array[i];
				i++;
			}
			if (curr_sum == sum) {
				System.out.println("sum lies b/w index " + i + " to " + (j - 1));
			}
			if (j < array.length)
				curr_sum = curr_sum + array[j];
		}
	}

	public static void subArrayGivenSumUsingMap(int[] array, int sum) {
		HashMap<Integer, Integer> map = new HashMap<>();
		int curr_sum = 0;
		int start = 0;// starting index of sub array
		// we are putting end =-1 not 0 if we find curr_sum
		// equal to sum at 1st index
		int end = -1; // ending index of sub array
		for (int i = 0; i < array.length; i++) {
			// every element of array adding to curr_sum
			curr_sum = curr_sum + array[i];

			// if difference b/w curr_sum and sum comes 0
			// then we find our sub array
			if (curr_sum - sum == 0) {
				start = 0;
				end = i;
				break;
			}
			if (map.containsKey(curr_sum - sum)) {
				start = map.get(curr_sum - sum) + 1;
				end = i;
				break;
			}
			// if both if condition not true then flow will reach here
			map.put(curr_sum, i);
		}
		if (end == -1) {
			System.out.println("we didn't find any sub Array");
		} else {
			System.out.println("starting index " + start + " ending index " + end);
		}
	}

	public static void main(String[] args) {
		 int[] array = { 15, 2, 4, 8, 9, 5, 10 };
		//int[] array = { 10, 2, -2, -20, 10 };
		//int sum = -10;
		 int sum=23;
		 subArrayGivenSum(array, sum);
		// subArrayWithGivenSum(array, sum);
		//subArrayGivenSumUsingMap(array, sum);
	}
}
